Ass5

import pandas as pd 
import numpy as np 
import re  # Added for regex 
from sklearn.model_selection import train_test_split 
from tensorflow.keras.preprocessing.text import Tokenizer 
from tensorflow.keras.preprocessing.sequence import pad_sequences 
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import SimpleRNN, Dense, Embedding 
data = pd.read_csv('/content/swiggy.csv') 
print("Columns in the dataset:") 
print(data.columns.tolist()) 
data["Review"] = data["Review"].str.lower() 
data["Review"] = data["Review"].replace(r'[^a-z0-9\s]', ', regex=True) 
data['sentiment'] = data['Avg Rating'].apply(lambda x: 1 if x > 3.5 else 0) 
data = data.dropna() 
max_features = 5000   
max_length = 200     
tokenizer = Tokenizer(num_words=max_features) 
tokenizer.fit_on_texts(data["Review"]) 
X = pad_sequences(tokenizer.texts_to_sequences(data["Review"]), maxlen=max_length) 
y = data['sentiment'].values   
X_train, X_test, y_train, y_test = train_test_split( 
X, y, test_size=0.2, random_state=42, stratify=y 
) 
X_train, X_val, y_train, y_val = train_test_split( 
X_train, y_train, test_size=0.1, random_state=42, stratify=y_train 
) 
model = Sequential([ 
Embedding(input_dim=max_features, output_dim=16, input_length=max_length), 
SimpleRNN(64, activation='tanh', return_sequences=False),                   
Dense(1, activation='sigmoid')                                           
]) 
model.compile( 
loss='binary_crossentropy', 
    optimizer='adam', 
    metrics=['accuracy'] 
) 
 
 
history = model.fit( 
    X_train, y_train, 
    epochs=5, 
    batch_size=32, 
    validation_data=(X_val, y_val), 
    verbose=1 
) 
 
score = model.evaluate(X_test, y_test, verbose=0) 
print(f"Test accuracy: {score[1]:.2f}") 
 
def predict_sentiment(review_text): 
    text = review_text.lower() 
    text = re.sub(r'[^a-z0-9\s]', '', text) 
    
    seq = tokenizer.texts_to_sequences([text]) 
    padded = pad_sequences(seq, maxlen=max_length) 
 
    prediction = model.predict(padded)[0][0] 
    return f"{'Positive' if prediction >= 0.5 else 'Negative'} (Probability: {prediction:.2f})" 
    
sample_review = "The food was great." 
print(f"Review: {sample_review}") 
print(f"Sentiment: {predict_sentiment(sample_review)}") 

